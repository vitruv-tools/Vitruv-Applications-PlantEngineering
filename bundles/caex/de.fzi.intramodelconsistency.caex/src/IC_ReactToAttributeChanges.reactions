import org.automationml.caex.caex.CaexFactory
import org.eclipse.emf.ecore.EStructuralFeature

import "http://org.automationml.caex" as CAEX

reactions: iC_ReactToAttributeChanges
in reaction to changes in CAEX
execute actions in CAEX

import routines iC_Utilities

reaction AttributeNameChange {
	after attribute replaced at CAEX::Attribute[name]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("name")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeDataTypeChange {
	after attribute replaced at CAEX::Attribute[attributeDataType]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("attributeDataType")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeChangeModeChange {
	after attribute replaced at CAEX::Attribute[changeMode]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("changeMode")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeDefaultValueChange {
	after attribute replaced at CAEX::Attribute[defaultValue]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("defaultValue")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeIDChange {
	after attribute replaced at CAEX::Attribute[iD]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("iD")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeUnitChange {
	after attribute replaced at CAEX::Attribute[unit]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("unit")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeValueChange {
	after attribute replaced at CAEX::Attribute[value]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("value")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

routine correctAttributeCloneFeatures(CAEX::Attribute of, plain EStructuralFeature as feature, plain Object as newValue){
	match{ 
		val corres = retrieve many CAEX::Attribute corresponding to of 
	}
	action {
		call {
			corres.forEach[updateFeature(it,feature,newValue)]
			if(!corres.empty)corres.get(0).eResource.modified = true
		} 
	}
	
}