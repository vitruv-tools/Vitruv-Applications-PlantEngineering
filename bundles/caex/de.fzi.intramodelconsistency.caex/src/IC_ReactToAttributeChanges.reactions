import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.ecore.EObject
import org.automationml.caex.caex.CAEXObject
import org.automationml.caex.caex.CaexFactory

import "http://org.automationml.caex" as CAEX

reactions: IC_ReactToAttributeChanges
in reaction to changes in CAEX
execute actions in CAEX

reaction AttributeNameChange {
	after attribute replaced at CAEX::Attribute[name]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("name")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeDataTypeChange {
	after attribute replaced at CAEX::Attribute[attributeDataType]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("attributeDataType")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeChangeModeChange {
	after attribute replaced at CAEX::Attribute[changeMode]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("changeMode")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeDefaultValueChange {
	after attribute replaced at CAEX::Attribute[defaultValue]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("defaultValue")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeIDChange {
	after attribute replaced at CAEX::Attribute[iD]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("iD")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeUnitChange {
	after attribute replaced at CAEX::Attribute[unit]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("unit")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

reaction AttributeValueChange {
	after attribute replaced at CAEX::Attribute[value]
	call {
		val feature = CaexFactory.eINSTANCE.createAttribute.eClass.getEStructuralFeature("value")
		correctAttributeCloneFeatures(affectedEObject, feature, newValue);
	}
}

routine correctAttributeCloneFeatures(CAEX::Attribute of, plain EStructuralFeature as feature, plain Object as newValue){
	match{ 
		val corres = retrieve many CAEX::Attribute corresponding to of 
	}
	action {
		call {
			corres.forEach[updateFeature(feature,newValue)]
			corres.forEach[eResource.modified = true]
		} 
	}
	
}

/* 
 * =======================================================================
 * All routines below this point are helper routines for the caex reactions
 * =======================================================================
 */

routine updateFeature(EObject obj, plain EStructuralFeature as feature, plain Object as newValue){
	action {
		call {
			val featureValue = obj.eGet(feature)
			if (featureValue instanceof EList){
				val clone = EcoreUtil.copy(newValue as EObject)
				featureValue.add(clone);				
				obj.setFeatureValue(feature,new BasicEList(featureValue.clone))
				addCAEXCorrespondence(clone as CAEXObject ,newValue as CAEXObject)
			}				
			else{
				obj.setFeatureValue(feature, newValue)
			}
		}
	}
}

routine setFeatureValue(EObject e, plain EStructuralFeature as f, plain Object as o) {
	action{
		update e {
			e.eSet(f,o)
			e.eResource.modified=true
		}
	}
}

routine addCAEXCorrespondence(CAEX::CAEXObject a,CAEX::CAEXObject b){
	action{
		add correspondence between a and b
	}
}