import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.common.util.BasicEList
import caex.caex30.caex.CAEXObject

import "http://www.dke.de/CAEX/300" as CAEX

reactions: iC_Utilities
in reaction to changes in CAEX
execute actions in CAEX

/* 
 * =======================================================================
 * This file contains helper routines for all caex reactions
 * =======================================================================
 */

routine addCAEXCorrespondence(CAEX::CAEXObject a,CAEX::CAEXObject b){
	action{
		add correspondence between a and b
	}
}

routine removeCAEXCorrespondence(CAEX::CAEXObject a,CAEX::CAEXObject b){
	action{
		remove correspondence between a and b
	}
}

routine deleteElement(CAEX::CAEXObject o) {
	action {
		delete o
	}
}

routine updateFeature(EObject obj, plain EStructuralFeature as feature, plain Object as newValue){
	action {
		call {
			val featureValue = obj.eGet(feature)
			if (featureValue instanceof EList){
				val clone = EcoreUtil.copy(newValue as EObject)
				featureValue.add(clone);				
				obj.setFeatureValue(feature,new BasicEList(featureValue.clone))
				addCAEXCorrespondence(clone as CAEXObject ,newValue as CAEXObject)
			}				
			else{
				obj.setFeatureValue(feature, newValue)
			}	
		}
	}
}

routine setFeatureValue(EObject e, plain EStructuralFeature as f, plain Object as o) {
	action{
		update e {
			e.eSet(f,o)
			e.eResource.modified=true
		}
	}
}