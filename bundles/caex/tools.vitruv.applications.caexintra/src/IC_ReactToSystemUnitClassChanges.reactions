import tools.vitruv.applications.caexintra.CAEXIntraConsistencyTools
import caex.caex30.caex.CAEXFactory
import caex.caex30.caex.InternalElement
import org.eclipse.emf.ecore.EStructuralFeature
import tools.vitruv.framework.userinteraction.UserInteractionType

import "http://www.dke.de/CAEX/300" as CAEX

reactions: iC_ReactToSystemUnitClassChanges
in reaction to changes in CAEX
execute actions in CAEX

import routines iC_Utilities

/** On Prototype name change also adjust refBaseSystemUnitClassPath of all correspondents*/
reaction NameChanged {
	after attribute replaced at CAEX::SystemUnitClass[name]
	call  {
		if((affectedEObject instanceof InternalElement)) return;
		correctPathsSystemUnitClassClones(affectedEObject)
	}
}

/** On Prototype changeMode change also adjust correspondents */
reaction ChangeModeChanged {
	after attribute replaced at CAEX::SystemUnitClass[changeMode]
	call {
		val feature = CAEXFactory.eINSTANCE.createInternalElement.eClass.getEStructuralFeature("changeMode")
		
		correctSystemUnitClassClones(affectedEObject, feature, newValue)
	}
}

/** On new attribute in Prototype, also add the same attribute to clones */
reaction AttributeAdded {
	after element inserted in CAEX::SystemUnitClass[^attribute]
	call {
		val feature = CAEXFactory.eINSTANCE.createInternalElement.eClass.getEStructuralFeature("attribute")		
		correctSystemUnitClassClones(affectedEObject, feature, newValue)
	}
}

reaction AttributeRemoved {
	after element removed from CAEX::SystemUnitClass[^attribute]
	call {
		removeAllClonesAndCorrespondencesAttribute(oldValue)
	}
}

reaction InternalElementAdded {
	after element inserted in CAEX::SystemUnitClass[internalElement]
	call {
		val feature = CAEXFactory.eINSTANCE.createInternalElement.eClass.getEStructuralFeature("internalElement")
		correctSystemUnitClassClones(affectedEObject, feature, newValue)
	}
}

/** On deletion of the prototype also remove all clones */
reaction SystemUnitClassDeleted {
	after element removed from CAEX::SystemUnitClassLib[systemUnitClass]
	call {		
		removeAllClonesAndCorrespondencesSysUnitClass(oldValue)
	}
}

/*
  	On new additionalInformation in Prototype, add same object to clones 
	===== Not working due to the AdditionalInformation Tuid bug ===== 
*/
reaction AdditionalInformationAdded {
 after element inserted in CAEX::SystemUnitClass[additionalInformation]
 call {
 	val feature = CAEXFactory.eINSTANCE.createInternalElement.eClass.getEStructuralFeature("additionalInformation")		
 	correctSystemUnitClassClones(affectedEObject, feature, newValue)
	}
}

 
 

/**
 * Routine that recursively corrects the references in refBaseClassPaths of a SystemUnitClass and all it's children SystemUnitClasses
 */
routine correctPathsSystemUnitClassClones(CAEX::SystemUnitClass affectedEObject) {
	action {
		call {
			if(correspondenceModel.getCorrespondingEObjects(#[affectedEObject]).isEmpty) return;
			//TODO: Modify to only start correction for Elements with correspondences
			var newRefBasePath = CAEXIntraConsistencyTools.generatePathFromTuid(correspondenceModel,affectedEObject,correspondenceModel.calculateTuidFromEObject(affectedEObject))				
			if(newRefBasePath === null) return;
			val feature = CAEXFactory.eINSTANCE.createInternalElement.eClass.getEStructuralFeature("refBaseSystemUnitPath")
			correctSystemUnitClassClones(affectedEObject, feature, newRefBasePath)
			
			//Recursively correct the paths of all children elements 
			if(!affectedEObject.systemUnitClass.empty)
				affectedEObject.systemUnitClass.forEach[correctPathsSystemUnitClassClones]
		}
	}
}

routine correctSystemUnitClassClones(CAEX::SystemUnitClass changedPrototype, plain EStructuralFeature as feature, plain Object as newValue){
	match {
		val clones = retrieve many CAEX::InternalElement corresponding to changedPrototype
		}
	action {	
		call {
			for(clon : clones){
				updateFeature(clon, feature, newValue)				
				clon.eResource.modified = true
				}
		}
	}
}

routine removeAllClonesAndCorrespondencesSysUnitClass(CAEX::SystemUnitClass affectedClass) {
	match {
		val clones = retrieve many CAEX::InternalElement corresponding to affectedClass
	}
	action  {
		call {		
			//Set refresh Resource before deleting from Resource
			if(!clones.empty) clones.get(0).eResource.modified=true;		
			clones.forEach[removeCAEXCorrespondence(affectedClass)]
			//Ask user before deleting clones
			val result = userInteracting.selectFromMessage(UserInteractionType.MODAL,
						"Should all InternalElements that correspond to the deleted SystemUnitClass also be removed?",
						"Yes","No")
			if(result == 0)	clones.forEach[deleteElement]					
		}
	}
}

routine removeAllClonesAndCorrespondencesAttribute(CAEX::Attribute affectedAttribute) {
	match {
		val clones = retrieve many CAEX::Attribute corresponding to affectedAttribute
	}
	action  {
		call{
			//Set refresh Resource before deleting from Resource
			if(!clones.empty) clones.get(0).eResource.modified=true;		
			clones.forEach[removeCAEXCorrespondence(affectedAttribute)]
			clones.forEach[deleteElement]
		}
	}
}