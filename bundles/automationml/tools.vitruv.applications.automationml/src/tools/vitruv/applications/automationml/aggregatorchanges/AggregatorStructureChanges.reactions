import tools.vitruv.applications.automationml.utils.aml.AMLTags
import tools.vitruv.applications.automationml.utils.aml.AggregatorUtils

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: aggregatorStructureChanges
in reaction to changes in AML
execute actions in AML

import aggregatorToCollada
import aggregatorToPlcopen

/**
 * reation for a removed aml project
 */
reaction RemoveAMLProject {
	after element aml::AMLProject removed as root
	call {
		logger.debug("Reaction RemoveAMLProject")
		
		//TODO reject change
		oldValue.eResource.contents.add(oldValue)
	}
}

/**
 * reaction for a removed caex container
 */
reaction ReplaceCAEXContainer {
	after element aml::CAEXContainer replaced at aml::AMLProject[caexcontainer]
	call {
		logger.debug("Reaction ReplaceCAEXContainer")
		
		if(oldValue !== null) {
			//TODO reject change
			affectedEObject.caexcontainer = oldValue
		} else {
			createCAEXFile(newValue)
		}
	}
}

/**
 * reaction for creation of a new collada container
 */
reaction CreateColladaContainer {
	after element aml::ColladaContainer created
	call {
		logger.debug("Reaction CreateColladaContainer")
		
		affectedEObject.path = ""
		createColladaFile(affectedEObject)
	}
}

/**
 * reaction for creation of a new plcopen container
 */
reaction CreatePLCopenContainer {
	after element aml::PLCopenContainer created
	call {
		logger.debug("Reaction CreatePLCopenContainer")
		
		affectedEObject.path = ""
		createPLCopenFile(affectedEObject)
	}
}

/**
 * reaction for a removed collada container
 */
reaction RemoveColladaContainer {
	after element aml::ColladaContainer deleted
	call {
		logger.debug("Reaction RemoveColladaContainer")
		
		deleteColladaFile(affectedEObject)
	}
}

/**
 * reaction for a removed plcopen container
 */
reaction RemovePLCopenContainer {
	after element aml::PLCopenContainer deleted
	call {
		logger.debug("Reaction RemovePLCopenContainer")
		
		deletePLCopenFile(affectedEObject)
	}
}

/**
 * reaction for creation of a new caex container
 */
routine createCAEXFile (aml::CAEXContainer container) {
	action {
		val caexfile = create caex::CAEXFile
		add correspondence between caexfile and container tagged with AMLTags.AML_CAEX
		execute {
			val caexNumber = AggregatorUtils.newNumberOfCAEXFiles
			persistProjectRelative(container, caexfile, "../../../../../Desktop/resources-gen/caex" + caexNumber + ".caex")
			//persistProjectRelative(container, caexfile, "resources-gen/caex" + caexNumber + ".caex")
		}
	}
}