import edu.kit.sdq.aml_aggregator.ColladaContainer
import edu.kit.sdq.aml_aggregator.PLCopenContainer
import tools.vitruv.applications.automationml.utils.aml.AMLTags
import tools.vitruv.applications.automationml.utils.aml.AggregatorUtils

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: aggregatorStructureChanges
in reaction to changes in AML
execute actions in AML

import aggregatorToCollada
import aggregatorToPlcopen

// ***** AML Projekt anlegen/ entfernen

reaction RemoveAMLProject {
	after element aml::AMLProject removed as root
	call {
		logger.debug("Reaction RemoveAMLProject")
		
		val shouldDeleteProject = userInteractor.confirmationDialogBuilder.message("Das ganze Projekt würde gelöscht werden. Fortfahren?").startInteraction
		if(shouldDeleteProject) {
			deleteCAEXFile(oldValue.caexcontainer)
			for(ColladaContainer currContainer : oldValue.colladacontainer) {
				deleteColladaFile(currContainer)
			}
			for(PLCopenContainer currContainer : oldValue.plcopencontainer) {
				deletePLCopenFile(currContainer)
			}
		} else {
			//TODO Änderung zurückrollen
			// kein Sprachstatement vorhanden, deswegen diese Formulierung
			oldValue.eResource.contents.add(oldValue)
		}
	}
}

// ***** CAEX löschen

reaction ReplaceCAEXContainer {
	after element aml::CAEXContainer replaced at aml::AMLProject[caexcontainer]
	call {
		logger.debug("Reaction ReplaceCAEXContainer")
		
		if(newValue === null) {
			//TODO Änderung zurückrollen
			// kein Sprachstatement vorhanden, deswegen diese Formulierung
			affectedEObject.caexcontainer = oldValue
			return;
		}
		
		deleteCAEXFile(oldValue)
		createCAEXFile(newValue)
	}
}

// ***** Collada oder PLCopen Datei anlegen/löschen

reaction CreateColladaContainer {
	after element aml::ColladaContainer created
	call {
		logger.debug("Reaction CreateColladaContainer")
		
		affectedEObject.path = ""
		createColladaFile(affectedEObject)
	}
}

reaction CreatePLCopenContainer {
	after element aml::PLCopenContainer created
	call {
		logger.debug("Reaction CreatePLCopenContainer")
		
		affectedEObject.path = ""
		createPLCopenFile(affectedEObject)
	}
}

reaction RemoveColladaContainer {
	after element aml::ColladaContainer deleted
	call {
		logger.debug("Reaction RemoveColladaContainer")
		
		deleteColladaFile(affectedEObject)
	}
}

reaction RemovePLCopenContainer {
	after element aml::PLCopenContainer deleted
	call {
		logger.debug("Reaction RemovePLCopenContainer")
		
		deletePLCopenFile(affectedEObject)
	}
}

// ***** Routine, um ein komplettes Projekt zu löschen

/*routine removeAMLProject(aml::AMLProject amlProject){
	action {
		delete amlProject
	}
}*/

// ***** Routinen, um CAEX Dateien zu erzeugen/löschen

routine createCAEXFile(aml::CAEXContainer container) {
	action {
		val caexFile = create caex::CAEXFile
		add correspondence between container and caexFile tagged with AMLTags.AML_CAEX
		execute {
			val caexNumber = AggregatorUtils.newNumberOfCAEXFiles
			persistProjectRelative(container, caexFile, "resources/resources-gen/caex" + caexNumber + ".caex")
		}
	}
}

routine deleteCAEXFile(aml::CAEXContainer container) {
	match {
		val caexFile = retrieve caex::CAEXFile corresponding to container tagged with AMLTags.AML_CAEX
	}
	action {
		delete caexFile
	}
}