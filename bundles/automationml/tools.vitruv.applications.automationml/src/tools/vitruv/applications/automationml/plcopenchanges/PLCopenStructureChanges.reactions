import caex.caex30.caex.ExternalInterface
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.InterfaceForAttributeChecker
import org.plcopen.xml.tc60201.PouType1
import org.eclipse.xtext.EcoreUtil2

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: plcopenStructureChanges
in reaction to changes in PLCOpen
execute actions in PLCOpen

// ***** Root anlegen/löschen

reaction CreatePLCopenRoot {
	after element plcopen::ProjectType created
	call {
		System.out.println("CreatePLCopenRoot")
		
		createPLCopenContainer(affectedEObject)
		createPLCopenStructure(affectedEObject)
	}
}

reaction RemovePLCopenRoot {
	after element plcopen::ProjectType deleted
	call {
		System.out.println("RemovePLCopenRoot")
		
		val pouType = EcoreUtil2.getAllContentsOfType(affectedEObject, PouType1).get(0) 
		
		changePathForPLCopenInterfacesToEmpty(pouType)
		removePLCopenContainer(affectedEObject)
	}
}

// ***** notwendige Beschreibungcontainer anlegen/löschen

reaction CreatePouType {
	after element plcopen::PouType1 created
	call {
		System.out.println("CreatePouType")
		
		deletePouType(affectedEObject)
	}
}

reaction DeletePouType {
	after element plcopen::PouType1 removed from plcopen::PousType[pou]
	call {
		System.out.println("DeletePouType")
		
		//TODO
		recreatePouType(affectedEObject, null)
	}
}

reaction DeletePousType {
	after element plcopen::PousType deleted
	call {
		System.out.println("DeletePousType")
		
		recreatePousType(affectedEObject)
	}
}

reaction DeleteTypesType {
	after element plcopen::TypesType deleted
	call {
		System.out.println("DeleteTypesType")
		
		recreateTypesType(affectedEObject)
	}
}

// ***** Routinen, um Container für PLCopen anzulegen oder zu entfernen

routine createPLCopenContainer(plcopen::ProjectType projectType) {
	action {
		val container = create aml::PLCopenContainer and initialize {
			container.path = ""
		} 
		add correspondence between projectType and container
	}
}

routine removePLCopenContainer(plcopen::ProjectType projectType) {
	match {
		val container = retrieve aml::PLCopenContainer corresponding to projectType
	}
	action {
		delete container
	}
}

// Routine, um Interfaces an gelöschte Dateien anzupassen

routine changePathForPLCopenInterfacesToEmpty(plcopen::PouType1 pouType) {
	match {
		val externalInterfaces = retrieve many caex::ExternalInterface corresponding to pouType
	}
	action {
		execute {
			for(ExternalInterface currInterface : externalInterfaces) {
				val pathAttribute = InterfaceForAttributeChecker.getAttributeInExternalInterface(currInterface, "refUri")
				pathAttribute.value = ""
			}
		}
	}
}

// ***** Routine, um Grundstruktur der Datei anzulegen

routine createPLCopenStructure(plcopen::ProjectType projectType) {
	action {
		val pouType = create plcopen::PouType1
		val pousType = create plcopen::PousType and initialize {
			pousType.pou.add(pouType)
		}
		val typesType = create plcopen::TypesType and initialize {
			typesType.pous = pousType
		}
		update projectType {
			projectType.types = typesType
		}
	}
}

// ***** Routinen, um Grundstruktur der Datei beizubehalten

routine deletePouType(plcopen::PouType1 pouType) {
	action {
		delete pouType
	}
}

routine recreatePouType(plcopen::PousType pousType, plcopen::PouType1 pouType) {
	action {
		update pousType {
			pousType.pou.add(pouType)
		}
	}
}

routine recreatePousType(plcopen::PousType pousType) {
	match {
		check {
			pousType.pou.size == 1
		}
	}
	action {
		execute {
			//TODO Änderung zurückrollen
		}
	}
}

routine recreateTypesType(plcopen::TypesType typesType) {
	match {
		check {
			typesType.pous.pou.size == 1
		}
	}
	action {
		execute {
			//TODO Änderung zurückrollen
		}
	}
}