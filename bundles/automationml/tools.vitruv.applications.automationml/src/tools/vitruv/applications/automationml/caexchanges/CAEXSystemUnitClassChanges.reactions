import org.eclipse.xtext.EcoreUtil2
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXInheritanceResolver
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXStringResolver
import caex.caex30.caex.ExternalInterface
import caex.caex30.caex.CAEXFile
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.SystemUnitClassForInterfaceChecker
import tools.vitruv.applications.automationml.utils.clonechangestests.InternalElementChecker
import caex.caex30.caex.InternalElement
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.InterfaceForAttributeChecker
import caex.caex30.caex.SystemUnitClass
import tools.vitruv.applications.automationml.utils.amlutils.TagHelper
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.ExternalInterfaceType

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: caexSystemUnitClassChanges
in reaction to changes in CAEX
execute actions in CAEX

// ***** Klasse bzw. Klassenbib entfernen

reaction DeleteSystemUnitClass {
	after element caex::SystemUnitClass deleted
	call {
		logger.debug("Reaction DeleteSystemUnitClass")
				
		val shouldClonesDeleted = userInteractor.confirmationDialogBuilder.message("Sollen alle internen Elemente, die diese oder eine untergeordnete Klasse referenzieren, gelöscht werden?").startInteraction
		if(shouldClonesDeleted) {
			removeClones(affectedEObject)
			for(SystemUnitClass currClass : EcoreUtil2.getAllContentsOfType(affectedEObject, SystemUnitClass)) {
				removeClones(currClass)
			}
		} else {
			removePrototypeFromInternalElement(affectedEObject)
			for(SystemUnitClass currClass : EcoreUtil2.getAllContentsOfType(affectedEObject, SystemUnitClass)) {
				removePrototypeFromInternalElement(currClass)
			}
		}
	}
}

reaction RemoveSystemUnitClassLib {
	after element removed from caex::CAEXFile[systemUnitClassLib]
	call {
		logger.debug("Reaction RemoveSystemUnitClassLib")
				
		val shouldClonesDeleted = userInteractor.confirmationDialogBuilder.message("Sollen alle internen Elemente, die Klassen dieser Bibliothek referenzieren, gelöscht werden?").startInteraction
		if(shouldClonesDeleted) {
			for(SystemUnitClass currClass : EcoreUtil2.getAllContentsOfType(oldValue, SystemUnitClass)) {
				removeClones(currClass)
			}
		} else {
			for(SystemUnitClass currClass : EcoreUtil2.getAllContentsOfType(oldValue, SystemUnitClass)) {
				removePrototypeFromInternalElement(currClass)
			}
		}
	}
}

// ***** ExternalInterface in Klassendefinition hinzufügen, entfernen

reaction AddExternalInterfaceToSystemClass {
	after element caex::ExternalInterface inserted in caex::SystemUnitClass[externalInterface]
	call {
		logger.debug("Reaction RemoveSystemUnitClassLib")
				
		val shouldChangePropagated = userInteractor.confirmationDialogBuilder.message("Soll in allen internen Elementen, die diese Klasse referenzieren, das Interface hinzugefügt werden?").startInteraction
		if(shouldChangePropagated) {
			addExternalInterfaceToInternalElements(newValue, affectedEObject)
		}		
	} 
}

reaction RemoveExternalInterfaceFromSystemClass {
	after element removed from caex::SystemUnitClass[externalInterface]
	with {
		oldValue instanceof ExternalInterface
	}
	call {
		logger.debug("Reaction RemoveExternalInterfaceFromSystemClass")
				
		val caexFile = EcoreUtil2.getContainerOfType(oldValue, CAEXFile)
		val externalInterfaceType = CAEXStringResolver.resolveInterfacePath(oldValue.refBaseClassPath, caexFile)
		
		if(CAEXInheritanceResolver.isInstanceOfPLCopenInterface(externalInterfaceType)) {
			removeCorrespondenceBetweenInterfaceInClassAndPLCopen(oldValue as ExternalInterface)
		} else if(CAEXInheritanceResolver.isInstanceOfColladaInterface(externalInterfaceType)) {
			removeCorrespondenceBetweenInterfaceInClassAndCollada(oldValue as ExternalInterface)
		}
		
		val shouldChangePropagated = userInteractor.confirmationDialogBuilder.message("Sollen in allen internen Elementen, die diese Klasse referenzieren, Interfaces entfernt werden?").startInteraction
		if(shouldChangePropagated) {
			removeExternalInterfaceFromInternalElement(oldValue as ExternalInterface, affectedEObject)
		}
	}
}

// ***** Routinen, um Klone beim Entfernen der Prototypen abzuändern bzw. zu löschen

routine removePrototypeFromInternalElement (caex::SystemUnitClass systemUnitClass) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass tagged with TagHelper.PROTOTYPE_CLONE
	}
	action {
		execute {
			for(InternalElement currInternalElement : internalElements) {
				currInternalElement.refBaseSystemUnitPath = ""
			}
		}
	}
}

routine removeClones(caex::SystemUnitClass systemUnitClass) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass tagged with TagHelper.PROTOTYPE_CLONE
	}
	action {
		execute {
			for(InternalElement currElem : internalElements) {
				removeClone(currElem)
			}
		}
	}
}

routine removeClone(caex::InternalElement internalElement) {
	action {
		delete internalElement
	}
}

// ***** Routinen, um interne Elemente abzuändern, analog zur Änderung der Klasse

routine addExternalInterfaceToInternalElements(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass tagged with TagHelper.PROTOTYPE_CLONE
		check {
			if(CAEXInheritanceResolver.isInstanceOfPLCopenInterface(externalInterface)) {
				return SystemUnitClassForInterfaceChecker.checkForExternalInterface(systemUnitClass, ExternalInterfaceType.PLCOPEN)
			} else if(CAEXInheritanceResolver.isInstanceOfColladaInterface(externalInterface)) {
				return SystemUnitClassForInterfaceChecker.checkForExternalInterface(systemUnitClass, ExternalInterfaceType.COLLADA)
			} else {
				return false
			}
		}
	}
	action {
		execute {
			val filteredList = InternalElementChecker.filterInternalElementsForChanges(internalElements, systemUnitClass)
			val uri = InterfaceForAttributeChecker.getAttributeInExternalInterface(externalInterface, "refUri").value
			for(InternalElement currInternalElement : filteredList) {
				addExternalInterfaceWithUriToInternalElement(externalInterface, currInternalElement, uri)
			}
		}
	}
}

routine addExternalInterfaceWithUriToInternalElement(caex::ExternalInterface externalInterface, caex::InternalElement internalElement, String uri) {
	action {
		val newAttribute = create caex::Attribute and initialize {
			newAttribute.name = "refUri"
			newAttribute.attributeDataType = "xs:anyURI"
			newAttribute.value = InterfaceForAttributeChecker.getAttributeInExternalInterface(externalInterface, "refUri").value
		}
		val newInterface = create caex::ExternalInterface and initialize {
			newInterface.name = externalInterface.name
			newInterface.^attribute.add(newAttribute)
			newInterface.refBaseClassPath = externalInterface.refBaseClassPath
		}
		update internalElement {
			internalElement.externalInterface.add(newInterface)
		}
	}
}

routine removeExternalInterfaceFromInternalElement(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass){
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass tagged with TagHelper.PROTOTYPE_CLONE
	} action {
		execute {
			val filteredList = InternalElementChecker.filterInternalElementsForChanges(internalElements, systemUnitClass)
			for(InternalElement currInternalElement : filteredList) {
				val foundedInterface = SystemUnitClassForInterfaceChecker.getExternalInterface(currInternalElement, externalInterface.name)
				if(foundedInterface !== null) {
					currInternalElement.externalInterface.remove(foundedInterface)
				}
			}
		}
	}
}

// ***** Routinen, um Korrespondenzen zwischen Interface und Verhaltensbeschreibung bzw. Geometrie zu entfernen

routine removeCorrespondenceBetweenInterfaceInClassAndPLCopen (caex::ExternalInterface externalInterface){
	match {
		val plcPouType = retrieve plcopen::PouType1 corresponding to externalInterface tagged with TagHelper.INTERFACE_POU
	}
	action {
		remove correspondence between externalInterface and plcPouType tagged with TagHelper.INTERFACE_POU
	}
}

routine removeCorrespondenceBetweenInterfaceInClassAndCollada (caex::ExternalInterface externalInterface){
	match {
		val colladaScene = retrieve collada::SceneType corresponding to externalInterface tagged with TagHelper.INTERFACE_SCENE
	}
	action {
		remove correspondence between externalInterface and colladaScene tagged with TagHelper.INTERFACE_SCENE
	}
}