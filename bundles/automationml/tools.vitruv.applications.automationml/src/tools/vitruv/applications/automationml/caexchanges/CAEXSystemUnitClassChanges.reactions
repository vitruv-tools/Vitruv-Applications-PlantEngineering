import org.eclipse.xtext.EcoreUtil2
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXInheritanceResolver
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXStringResolver
import caex.caex30.caex.ExternalInterface
import caex.caex30.caex.CAEXFile
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.SystemUnitClassForInterfaceChecker
import tools.vitruv.applications.automationml.utils.clonechangestests.InternalElementChecker
import caex.caex30.caex.InternalElement
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.SystemUnitClassForInterfaceChecker.InterfaceType

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: caexSystemUnitClassChanges
in reaction to changes in CAEX
execute actions in CAEX

// ***** Klasse bzw. Klassenbib entfernen

reaction RemoveSystemUnitClass {
	after element removed from caex::SystemUnitClass[systemUnitClass]
	call {
		val userInput = userInteractor.confirmationDialogBuilder.message("Sollen alle internen Elemente, die diese Klasse referenzieren, gelöscht werden?").startInteraction
		if(userInput) {
			removeClone(oldValue)
		} else {
			removePrototypeFromInternalElement(oldValue)
		}
	}
}

reaction RemoveSystemUnitClassFromBib {
	after element removed from caex::SystemUnitClassLib[systemUnitClass]
	call {
		val userInput = userInteractor.confirmationDialogBuilder.message("Sollen alle internen Elemente, die diese Klasse referenzieren, gelöscht werden?").startInteraction
		if(userInput) {
			removeClone(oldValue)
		} else {
			removePrototypeFromInternalElement(oldValue)
		}
	}
}

reaction RemoveSystemUnitClassLib {
	after element removed from caex::CAEXFile[systemUnitClassLib]
	call {
		//TODO evtl gar nichts, kommt auf rekursion beim löschen an...
	}
}

// ***** ExternalInterface in Klassendefinition hinzufügen, entfernen

reaction AddExternalInterfaceToSystemClass {
	after element caex::ExternalInterface inserted in caex::SystemUnitClass[externalInterface]
	call {
		val userInput = userInteractor.confirmationDialogBuilder.message("Soll in allen internen Elementen, die diese Klasse referenzieren, das Interface hinzugefügt werden?").startInteraction
		if(userInput) {
			addExternalInterfaceToInternalElement(newValue, affectedEObject)
		}		
	} 
}

reaction RemoveExternalInterfaceFromSystemClass {
	after element removed from caex::SystemUnitClass[externalInterface]
	with {
		oldValue instanceof ExternalInterface
	}
	call {
		val caexFile = EcoreUtil2.getContainerOfType(oldValue, CAEXFile)
		val externalInterfaceType = CAEXStringResolver.resolveInterfacePath(oldValue.refBaseClassPath, caexFile)
		val plcopenInterfacePath = "AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface"
		val colladaInterfacePath = "AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/COLLADAInterface"
		
		if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, plcopenInterfacePath)) {
			removeCorrespondenceBetweenInterfaceInClassAndPLCopen(oldValue as ExternalInterface)
		} else if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, colladaInterfacePath)) {
			removeCorrespondenceBetweenInterfaceInClassAndCollada(oldValue as ExternalInterface)
		}
		
		val userInput = userInteractor.confirmationDialogBuilder.message("Sollen in allen internen Elementen, die diese Klasse referenzieren, Interfaces entfernt werden?").startInteraction
		if(userInput) {
			removeExternalInterfaceFromInternalElement(oldValue as ExternalInterface, affectedEObject)
		}
	}
}

// ***** Routinen, um Klone beim Entfernen der Prototypen abzuändern bzw. zu löschen

routine removePrototypeFromInternalElement (caex::SystemUnitClass systemUnitClass) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass
	}
	action {
		execute {
			for(InternalElement currInternalElement : internalElements) {
				currInternalElement.refBaseSystemUnitPath = ""
			}
		}
		//remove correspondence between internalElements and systemUnitClass //TODO überhaupt notwendig, wenn Prototypen gelöscht werden?
	}
}

routine removeClone(caex::SystemUnitClass systemUnitClass) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass
	}
	action {
		//remove correspondence between internalElement and systemUnitClass //TODO überhaupt notwendig, wenn Prototypen gelöscht werden?
		//delete internalElements //TODO wie lösche ich das?
		execute {
			
		}
	}
}

// ***** Routinen, um interne Elemente abzuändern, analog zur Änderung der Klasse

//TODO alle externalInterfaces?? oder nur PLCopen und Collada?? (in anderer Klasse nur plcopen/collada)
routine addExternalInterfaceToInternalElement(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass) {
	match {
		val internalElement = retrieve many caex::InternalElement corresponding to systemUnitClass
		check {
			SystemUnitClassForInterfaceChecker.checkForExternalInterface(systemUnitClass, InterfaceType.PLCOPEN)
		}
		check {
			InternalElementChecker.checkInternalElementForChanges(internalElement, systemUnitClass)
		}
	}
	action {
		val newAttribute = create caex::Attribute and initialize {
			newAttribute.name = "refUri"
			newAttribute.attributeDataType = "xs:anyURI"
			newAttribute.value = SystemUnitClassForInterfaceChecker.getExternalInterface(systemUnitClass, InterfaceType.PLCOPEN).^attribute.get(0).value
		}
		val newInterface = create caex::ExternalInterface and initialize {
			newInterface.name = externalInterface.name
			newInterface.^attribute.add(newAttribute)
			newInterface.refBaseClassPath = externalInterface.refBaseClassPath
		}
		update internalElement {
			internalElement.externalInterface.add(newInterface)
		}
	}
}

routine removeExternalInterfaceFromInternalElement(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass){
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass 
	} action {
		execute {
			val filteredList = InternalElementChecker.filterInternalElementsForChanges(internalElements, systemUnitClass)
			for(InternalElement currInternalElement : filteredList) {
				val foundedInterface = SystemUnitClassForInterfaceChecker.getExternalInterface(currInternalElement, externalInterface.name)
				if(foundedInterface !== null) {
					currInternalElement.externalInterface.remove(foundedInterface)
				}
			}
		}
	}
}

// ***** Routinen, um Korrespondenzen zwischen Interface und Verhaltensbeschreibung bzw. Geometrie zu entfernen

routine removeCorrespondenceBetweenInterfaceInClassAndPLCopen (caex::ExternalInterface externalInterface){
	match {
		val plcPouType = retrieve plcopen::PouType1 corresponding to externalInterface
	}
	action {
		remove correspondence between externalInterface and plcPouType
	}
}

routine removeCorrespondenceBetweenInterfaceInClassAndCollada (caex::ExternalInterface externalInterface){
	match {
		val colladaXYZ = retrieve collada::COLLADAType corresponding to externalInterface	//TODO richtigen Datentyp
	}
	action {
		remove correspondence between externalInterface and colladaXYZ
	}
}
