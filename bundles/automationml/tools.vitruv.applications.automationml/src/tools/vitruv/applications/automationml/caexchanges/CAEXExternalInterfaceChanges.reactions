import org.eclipse.xtext.EcoreUtil2
import java.util.LinkedList
import org.eclipse.emf.ecore.EObject
import org.plcopen.xml.tc60201.PouType1
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXInheritanceResolver
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXStringResolver
import caex.caex30.caex.CAEXFile
import caex.caex30.caex.InternalElement
import caex.caex30.caex.RoleClass
import caex.caex30.caex.SystemUnitClass
import caex.caex30.caex.ExternalInterface
import caex.caex30.caex.Attribute
import caex.caex30.caex.InterfaceClass

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: caexExternalInterfaceChanges
in reaction to changes in CAEX
execute actions in CAEX

// ***** Interface Typ einfügen/entfernen (ändern dadurch abgehandelt)

reaction AddExternalInterfaceType {
	after attribute insert in caex::ExternalInterface[refBaseClassPath]
	call {
		val caexFile = EcoreUtil2.getContainerOfType(affectedEObject, CAEXFile)
		val externalInterfaceType = CAEXStringResolver.resolveInterfacePath(newValue ,caexFile)
		val plcopenInterfacePath = "AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface"
		val colladaInterfacePath = "" //TODO
		val container = affectedEObject.eContainer
				
		if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, plcopenInterfacePath)) {
			addCorrespondenceBetweenInterfaceAndPLCopen(affectedEObject, caexFile)	//TODO brauche ich das überhaupt? (Pfad immer leer?)
			addPathAttributeToExternalInterface(affectedEObject)
		} else if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, colladaInterfacePath)) {
			addCorrespondenceBetweenInterfaceAndCollada(affectedEObject, caexFile)	//TODO brauche ich das überhaupt? (Pfad immer leer?)
			addPathAttributeToExternalInterface(affectedEObject)
		}
		
		if(container instanceof InternalElement) {
			//TODO Spiegelelement?? Vorüberprüfung notwendig??
		} else if(container instanceof RoleClass) {
			//TODO
		} else if(container instanceof SystemUnitClass) {
			val userInput = userInteractor.confirmationDialogBuilder.message("Sollen alle Internen Elemente, die diese Klasse referenzieren, analog abgeändert werden?").startInteraction
			if(userInput) {
				changeExternalInterfaceTypeInInternalElement(affectedEObject, container)
			}
		}
	}
}

reaction RemoveExternalInterfaceType {
	after attribute remove from caex::ExternalInterface[refBaseClassPath]
	call {
		val caexFile = EcoreUtil2.getContainerOfType(affectedEObject, CAEXFile)
		val externalInterfaceType = CAEXStringResolver.resolveInterfacePath(oldValue, caexFile)
		val plcopenInterfacePath = "AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface"
		val colladaInterfacePath = "" //TODO
		val container = affectedEObject.eContainer
				
		if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, plcopenInterfacePath)) {
			removeCorrespondenceBetweenInterfaceAndPLCopen(affectedEObject)
			removePathAttributeFromExternalInterface(affectedEObject)
		} else if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, colladaInterfacePath)) {
			removeCorrespondenceBetweenInterfaceAndCollada(affectedEObject)
			removePathAttributeFromExternalInterface(affectedEObject)
		}
		
		if(container instanceof InternalElement) {
			//TODO Spiegelelement?? Vorüberprüfung notwendig
		} else if(container instanceof RoleClass) {
			//TODO
		} else if(container instanceof SystemUnitClass) {
			val userInput = userInteractor.confirmationDialogBuilder.message("Sollen alle Internen Elemente, die diese Klasse referenzieren, analog abgeändert werden?").startInteraction
			if(userInput) {
				changeExternalInterfaceTypeInInternalElement(affectedEObject, container)
			}
		}
	}
}

// ***** Pfadangabe in CAEX zu PLCopen Datei geändert

reaction ChangeExternalInterfacePath {
	after attribute replaced at caex::Attribute[value] 
	with {
		affectedEObject.name.equals("refURI") && EcoreUtil2.getContainerOfType(affectedEObject, ExternalInterface) !== null 
	}
	call {
		val attributeParent = EcoreUtil2.getContainerOfType(affectedEObject, ExternalInterface)
		val caexFile = EcoreUtil2.getContainerOfType(attributeParent, CAEXFile)
		val externalInterfaceType = CAEXStringResolver.resolveInterfacePath(attributeParent.refBaseClassPath, caexFile)
		val plcopenInterfacePath = "AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface"
		val colladaInterfacePath = "" //TODO
		val parentContainer = attributeParent.eContainer
				
		if (CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, plcopenInterfacePath)) {
			changeCorrespondencesDueToPathChanges(attributeParent, caexFile, oldValue, newValue, false)
		} else if(CAEXInheritanceResolver.isInterfaceInstanceOf(externalInterfaceType, colladaInterfacePath)) {
			changeCorrespondencesDueToPathChanges(attributeParent, caexFile, oldValue, newValue, true)
		}
		
		if(parentContainer instanceof InternalElement) {
			//TODO Spiegelelement?? Vorüberprüfung notwendig
		} else if(parentContainer instanceof RoleClass) {
			//TODO
		} else if(parentContainer instanceof SystemUnitClass) {
			val userInput = userInteractor.confirmationDialogBuilder.message("Sollen alle Internen Elemente, die diese Klasse referenzieren, analog abgeändert werden?").startInteraction
			if(userInput) {
				changePathForExternalInterfaceInInternalElement(attributeParent, parentContainer, newValue)
			}
		}
	}
}

// ***** Routine, um mit Pfadänderungen umzugehen

//Boolean false: plcopen
routine changeCorrespondencesDueToPathChanges (caex::ExternalInterface externalInterface, caex::CAEXFile caexFile, String oldPath, String newPath, Boolean isCollada ) {
	action {
		//TODO Pfad überprüfen, evtl. Nutzerinteraktion, evtl. PLCopen/Collada Dokument anlegen oder Dateipfad abändern, Aufruf removeCorrespondence und addCorrespondence
		execute{
			
		}
	}
}

// ***** Routinen, um Korrespondenzen zwischen Interface und Verhaltensbeschreibung zu setzen bzw. zu entfernen

routine addCorrespondenceBetweenInterfaceAndPLCopen (caex::ExternalInterface externalInterface, caex::CAEXFile caexFile) {
	match {
		val plcProject = retrieve plcopen::ProjectType corresponding to caexFile
	}
	action {
		execute {
			val pouTypes = EcoreUtil2.getAllContentsOfType(plcProject, PouType1)
			val first = new LinkedList<EObject>
			first.add(pouTypes.get(1))
			val second = new LinkedList<EObject>
			second.add(externalInterface)
			correspondenceModel.createAndAddCorrespondence(first, second)
		}
		add correspondence between externalInterface and plcProject
	}
}

routine removeCorrespondenceBetweenInterfaceAndPLCopen (caex::ExternalInterface externalInterface){
	match {
		val plcPouType = retrieve plcopen::PouType1 corresponding to externalInterface
	}
	action {
		remove correspondence between externalInterface and plcPouType
	}
}

// ***** Routinen, um Korrespondenzen zwischen Interface und Geometriebeschreibung zu setzen bzw. zu entfernen

routine addCorrespondenceBetweenInterfaceAndCollada (caex::ExternalInterface externalInterface, caex::CAEXFile caexFile) {
	action {
		//TODO
		execute {
			
		}
	}
}

routine removeCorrespondenceBetweenInterfaceAndCollada (caex::ExternalInterface externalInterface){
	action {
		//TODO
		execute {
			
		}
	}
}

// ***** Routinen, um ein Pfadattribut einem ExternalInterface hinzuzufügen bzw. zu entfernen

routine addPathAttributeToExternalInterface(caex::ExternalInterface externalInterface){
	action {
		val newAttribute = create caex::Attribute and initialize {
			newAttribute.name = "refUri"
			newAttribute.attributeDataType = "xs:anyURI"
			newAttribute.value = ""
		}
		update externalInterface {
			externalInterface.^attribute.add(newAttribute)
		}
	}
}

routine removePathAttributeFromExternalInterface(caex::ExternalInterface externalInterface){
	action {
		update externalInterface {
			for(Attribute currAttribute : externalInterface.^attribute) {
				if(currAttribute.name.equals("refUri")) {
					//TODO kann das klappen??
					externalInterface.^attribute.remove(currAttribute)
				}
			}
		}
	}
}

// ***** Routinen, um interne Elemente abzuändern, analog zur Änderung der Klasse

routine changeExternalInterfaceTypeInInternalElement(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass) {
	match {
		//TODO vorherige Überschreibung beachten!
		//TODO retrieve many
		val internalElement = retrieve caex::InternalElement corresponding to systemUnitClass
	}
	action {
		update internalElement {
			for (InterfaceClass currExternalInterface : internalElement.externalInterface){
				if(currExternalInterface instanceof ExternalInterface) {
					if(currExternalInterface.name.equals(externalInterface.name)){
						currExternalInterface.refBaseClassPath = externalInterface.refBaseClassPath
					}
				}
			}
		}
	}
}

routine changePathForExternalInterfaceInInternalElement(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass, String path) {
	match {
		//TODO vorherige Überschreibung beachten!
		val internalElement = retrieve caex::InternalElement corresponding to systemUnitClass
	}
	action {
		update internalElement {
			for (InterfaceClass currExternalInterface : internalElement.externalInterface){
				if(currExternalInterface instanceof ExternalInterface) {
					if(currExternalInterface.name.equals(externalInterface.name)){
						for(Attribute currAttribute : currExternalInterface.^attribute) {
							if(currAttribute.name.equals("refUri")){
								currAttribute.value = path
							}
						}
					}
				}
			}
		}
	}
}