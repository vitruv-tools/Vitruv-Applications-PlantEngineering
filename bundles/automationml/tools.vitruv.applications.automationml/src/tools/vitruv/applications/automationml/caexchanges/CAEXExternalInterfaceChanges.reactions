import org.eclipse.xtext.EcoreUtil2
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXInheritanceResolver
import tools.vitruv.applications.automationml.utils.caexresolver.CAEXStringResolver
import caex.caex30.caex.CAEXFile
import caex.caex30.caex.InternalElement
import caex.caex30.caex.SystemUnitClass
import caex.caex30.caex.ExternalInterface
import tools.vitruv.applications.automationml.utils.externalInterfaceUtils.SystemUnitClassForInterfaceChecker
import tools.vitruv.applications.automationml.utils.aml.CAEXUtils
import tools.vitruv.applications.automationml.utils.prototypeclone.CloneUtils
import tools.vitruv.applications.automationml.utils.aml.AggregatorUtils
import edu.kit.sdq.aml_aggregator.AMLProject
import tools.vitruv.applications.automationml.utils.aml.AMLTags
import caex.caex30.caex.Attribute
import tools.vitruv.applications.automationml.utils.caexresolver.InterfaceResolver
import tools.vitruv.applications.automationml.utils.caexresolver.InterfaceResolver.ErrorCode

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: caexExternalInterfaceChanges
in reaction to changes in CAEX
execute actions in CAEX

import caexToCollada
import caexToPlcopen

// ***** Interface Typ ändern

reaction ChangeExternalInterfaceType {
	after attribute replaced at caex::ExternalInterface[refBaseClassPath]
	call {
		logger.debug("Reaction ChangeExternalInterfaceType")
		
		val caexFile = EcoreUtil2.getContainerOfType(affectedEObject, CAEXFile)
		
		if(newValue.isNullOrEmpty) {
			changeExternalInterfaceTypeToNull(affectedEObject, oldValue)
		} else {
			//TODO Änderungen werden zurückgerollt
			val errorCode = InterfaceResolver.checkIfPathIsExisting(newValue, caexFile)
			switch(errorCode) {
				case ErrorCode.EMPTY_STRING_OR_FILE: {
					userInteractor.notificationDialogBuilder.message("Fehler in der Implementierung").startInteraction
					return
				}
				case ErrorCode.BREAK_RULE: {
					userInteractor.notificationDialogBuilder.message("Interface nicht vorhanden. Änderung wird zurückgerollt").startInteraction
					affectedEObject.refBaseClassPath = oldValue
					return
				}
				case ErrorCode.SEGMENT_NOT_FOUND: {
					userInteractor.notificationDialogBuilder.message("Interface nicht vorhanden. Änderung wird zurückgerollt").startInteraction
					affectedEObject.refBaseClassPath = oldValue
					return
				}
				case ErrorCode.LAST_SEGMENT_NOT_FOUND: {
					val userInput = userInteractor.confirmationDialogBuilder.message("Interface nicht vorhanden. Soll es erzeugt werden? Ansonsten wird die Änderung zurückgerollt").startInteraction
					if(userInput) {
						createInterfaceClassInTree(newValue, caexFile, affectedEObject)
					} else {
						affectedEObject.refBaseClassPath = oldValue
						return
					}
				}
				case ErrorCode.WRONG_TYPE: {
					userInteractor.notificationDialogBuilder.message("Interface nicht vorhanden. Änderung wird zurückgerollt").startInteraction
					affectedEObject.refBaseClassPath = oldValue
					return
				}
				case INTERFACE_FOUND: {
					//Do nothing
				}	
			}
			
			if(oldValue.isNullOrEmpty) {
				changeExternalInterfaceTypeFromNullToNotNull(caexFile, newValue, affectedEObject)
			} else {
				changeExternalInterfaceTypeNotToNull(caexFile, oldValue, newValue, affectedEObject)
			}
		}
		
		val container = affectedEObject.eContainer
		if(container instanceof SystemUnitClass && !(container instanceof InternalElement)) {
			val shouldChangePropagated = userInteractor.confirmationDialogBuilder.message("Sollen alle Internen Elemente, die diese Klasse referenzieren, analog abgeändert werden?").startInteraction
			if(shouldChangePropagated) {
				changeExternalInterfaceTypeInInternalElement(container as SystemUnitClass, affectedEObject, oldValue, caexFile)
			}
		}
	}
}

// ***** Pfadangabe in CAEX zu PLCopen/Collada Datei geändert

reaction ChangeExternalInterfacePath {
	after attribute replaced at caex::Attribute[value] 
	with {
		affectedEObject.name.equals("refURI") && EcoreUtil2.getContainerOfType(affectedEObject, ExternalInterface) !== null 
	}
	call {
		logger.debug("Reaction ChangeExternalInterfacePath")
				
		val attributeParent = EcoreUtil2.getContainerOfType(affectedEObject, ExternalInterface)
		val caexFile = EcoreUtil2.getContainerOfType(attributeParent, CAEXFile)
		val externalInterfaceType = CAEXStringResolver.resolveInterfacePath(attributeParent.refBaseClassPath, caexFile)
		val parentContainer = attributeParent.eContainer
		val isPLCopen = CAEXInheritanceResolver.isInstanceOfPLCopenInterface(externalInterfaceType, caexFile)
		val isCollada = CAEXInheritanceResolver.isInstanceOfColladaInterface(externalInterfaceType, caexFile)
				
		if(newValue.isNullOrEmpty) {
			if(isCollada) {
				removeCorrespondenceBetweenInterfaceAndCollada(attributeParent)
			} else if (isPLCopen) {
				removeCorrespondenceBetweenInterfaceAndPLCopen(attributeParent)
			}
		} else {	
			if (isPLCopen) {
				changeCorrespondencesDueToPathChanges(attributeParent, caexFile, newValue, oldValue, false)
			} else if(isCollada) {
				changeCorrespondencesDueToPathChanges(attributeParent, caexFile, newValue, oldValue, true)
			}
		}
		
		if(parentContainer instanceof SystemUnitClass && !(parentContainer instanceof InternalElement)) {
			val shouldChangePropagated = userInteractor.confirmationDialogBuilder.message("Sollen alle Internen Elemente, die diese Klasse referenzieren, analog abgeändert werden?").startInteraction
			if(shouldChangePropagated) {
				changePathForExternalInterfaceInInternalElement(attributeParent, parentContainer as SystemUnitClass, newValue, caexFile)
			}
		}
	}
}

routine changeExternalInterfaceTypeToNull(caex::ExternalInterface externalInterface, String oldValue) {
	action {
		execute {
			if(!oldValue.isNullOrEmpty) {
				removeCorrespondenceBetweenInterfaceAndItsClass(externalInterface)
				removePathAttributeFromExternalInterface(externalInterface)
			}
			
		}
	}
}

routine changeExternalInterfaceTypeNotToNull(caex::CAEXFile caexFile, String oldValue, String newValue, caex::ExternalInterface externalInterface) {
	action{
		execute {
			val oldInterfaceClass = CAEXStringResolver.resolveInterfacePath(oldValue, caexFile)
			val isOldPlcopen = CAEXInheritanceResolver.isInstanceOfPLCopenInterface(oldInterfaceClass, caexFile)
			val isOldCollada = CAEXInheritanceResolver.isInstanceOfColladaInterface(oldInterfaceClass, caexFile)

			val newInterfaceClass = CAEXStringResolver.resolveInterfacePath(newValue, caexFile)
			val isNewPlcopen = CAEXInheritanceResolver.isInstanceOfPLCopenInterface(newInterfaceClass, caexFile)
			val isNewCollada = CAEXInheritanceResolver.isInstanceOfColladaInterface(newInterfaceClass, caexFile)
			
			if((isOldPlcopen && !isNewPlcopen) || (isOldCollada && !isNewCollada)) {
				removePathAttributeFromExternalInterface(externalInterface)
			}
			
			if((isNewPlcopen && !isOldPlcopen) || (isNewCollada && !isOldCollada)) {
				addPathAttributeToExternalInterface(externalInterface)
			}
			
			removeCorrespondenceBetweenInterfaceAndItsClass(externalInterface)
			addCorrespondenceBetweenInterfaceAndItsClass(externalInterface, newInterfaceClass)
		}
	}
}

routine changeExternalInterfaceTypeFromNullToNotNull(caex::CAEXFile caexFile, String newValue, caex::ExternalInterface externalInterface) {
	action {
		execute {
			val newInterfaceClass = CAEXStringResolver.resolveInterfacePath(newValue, caexFile)
			
			val isNewPlcopen = CAEXInheritanceResolver.isInstanceOfPLCopenInterface(newInterfaceClass, caexFile)
			val isNewCollada = CAEXInheritanceResolver.isInstanceOfColladaInterface(newInterfaceClass, caexFile)
			
			if(isNewPlcopen || isNewCollada) {
				addPathAttributeToExternalInterface(externalInterface)
			}
			
			addCorrespondenceBetweenInterfaceAndItsClass(externalInterface, newInterfaceClass)
		}
	}
}

// ***** Routine, für geänderten Interface-Typ

routine addCorrespondenceBetweenInterfaceAndItsClass (caex::ExternalInterface externalInterface, caex::InterfaceClass interfaceClass) {
	action {
		add correspondence between externalInterface and interfaceClass tagged with AMLTags.CLASS_INTERFACE
	}
}


// ***** Routine, um mit Pfadänderungen umzugehen

//Boolean false: plcopen
routine changeCorrespondencesDueToPathChanges (caex::ExternalInterface externalInterface, caex::CAEXFile caexFile, String newPath, String oldPath, Boolean isCollada ) {
	match {
		val caexContainer = retrieve aml::CAEXContainer corresponding to caexFile tagged with AMLTags.AML_CAEX
	}
	action {
		execute{
			if(isCollada) {
				val colladaContainer = AggregatorUtils.getColladaContainerByPath(caexContainer.eContainer as AMLProject, newPath)
				if(colladaContainer !== null) {
					removeCorrespondenceBetweenInterfaceAndCollada(externalInterface)
					addCorrespondenceBetweenInterfaceAndCollada(externalInterface, colladaContainer)
					return;
				}
			} else {
				val plcopenContainer = AggregatorUtils.getPLCopenContainerByPath(caexContainer.eContainer as AMLProject, newPath)
				if(plcopenContainer !== null) {
					removeCorrespondenceBetweenInterfaceAndPLCopen(externalInterface)
					addCorrespondenceBetweenInterfaceAndPLCopen(externalInterface, plcopenContainer)
					return;
				}
			}
			
			val shouldFileCreated = userInteractor.confirmationDialogBuilder.message("Der angegebene Pfad existiert nicht. Soll ein neues Dokument angelegt werden? Alternativ würde die Änderung zurückgerollt werden.").startInteraction
			if(shouldFileCreated) {
				if(isCollada) {
					createNewColladaContainer(externalInterface, caexContainer.eContainer as AMLProject, newPath)
				} else {
					createNewPLCopenContainer(externalInterface, caexContainer.eContainer as AMLProject, newPath)
				}
			} else {
				//TODO Änderung zurückrollen
				val att = CAEXUtils.getAttributeInExternalInterface(externalInterface, "refUri")
				att.value = oldPath
			}
		}
	}
}

// ***** Routinen, um ein Pfadattribut einem ExternalInterface hinzuzufügen bzw. zu entfernen

routine addPathAttributeToExternalInterface(caex::ExternalInterface externalInterface){
	action {
		val newAttribute = create caex::Attribute and initialize {
			newAttribute.name = "refUri"
			newAttribute.attributeDataType = "xs:anyURI"
			newAttribute.value = ""
		}
		update externalInterface {
			externalInterface.^attribute.add(newAttribute)
		}
	}
}

routine removePathAttributeFromExternalInterface(caex::ExternalInterface externalInterface){
	action {
		execute {
			val pathAttribute = CAEXUtils.getAttributeInExternalInterface(externalInterface, "refUri")
			if(pathAttribute !== null){
				externalInterface.^attribute.remove(pathAttribute)
			}
		}
	}
}

// ***** Routinen, um interne Elemente abzuändern, analog zur Änderung der Klasse

routine changeExternalInterfaceTypeInInternalElement(caex::SystemUnitClass systemUnitClass, caex::ExternalInterface newExternalInterface, String oldExternalInterfaceType, caex::CAEXFile rootElement) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass tagged with AMLTags.PROTOTYPE_CLONE
	}
	action {
		execute {
			val filteredInternalElements = CloneUtils.filterChangedClones(internalElements, systemUnitClass)
			for(InternalElement currInternalElement : filteredInternalElements) {
				if(!oldExternalInterfaceType.isNullOrEmpty) {
					val interfaceInInternalElement = SystemUnitClassForInterfaceChecker.getExternalInterface(currInternalElement, oldExternalInterfaceType, rootElement)
					removeCorrespondenceBetweenInterfaceAndItsClass(interfaceInInternalElement)
					removePathAttributeFromExternalInterface(interfaceInInternalElement)
					interfaceInInternalElement.refBaseClassPath = newExternalInterface.refBaseClassPath
					createAttributesForExternalInterfaceInInternalElement(interfaceInInternalElement, newExternalInterface)
					addCorrespondenceBetweenInterfaceAndItsClass(interfaceInInternalElement, CAEXStringResolver.resolveInterfacePath(newExternalInterface.refBaseClassPath, rootElement))
				} else {
					createExternalInterface(currInternalElement, newExternalInterface)
				}
			}
		}
	}
}

routine createExternalInterface(caex::InternalElement container, caex::ExternalInterface interfaceInSystemUnitClass) {
	match {
		val interfaceClass = retrieve caex::InterfaceClass corresponding to interfaceInSystemUnitClass tagged with AMLTags.CLASS_INTERFACE
	}
	action {
		val newExternalInterface = create caex::ExternalInterface and initialize {
			newExternalInterface.refBaseClassPath = interfaceInSystemUnitClass.refBaseClassPath
			newExternalInterface.name = interfaceInSystemUnitClass.name
		}
		execute {
			createAttributesForExternalInterfaceInInternalElement(newExternalInterface, interfaceInSystemUnitClass)
		}
		update container {
			container.externalInterface.add(newExternalInterface)
		}
		add correspondence between interfaceClass and newExternalInterface tagged with AMLTags.CLASS_INTERFACE
	}
}

routine createAttributesForExternalInterfaceInInternalElement(caex::ExternalInterface interfaceInInternalElement, caex::ExternalInterface interfaceInSystemUnitClass) {
	action {
		execute {
			for(Attribute currAttribute : interfaceInSystemUnitClass.^attribute) {
				createAttribute(interfaceInInternalElement, currAttribute.name, currAttribute.value)
			}
		}
	}
}

routine createAttribute(caex::ExternalInterface container, String name, String value) {
	action {
		val newAttribute = create caex::Attribute and initialize {
			newAttribute.name = name
			newAttribute.value = value
		}
		update container {
			container.^attribute.add(newAttribute)
		}
	}
}

routine removeCorrespondenceBetweenInterfaceAndItsClass(caex::ExternalInterface externalInterface) {
	match {
		val interfaceClass = retrieve caex::InterfaceClass corresponding to externalInterface tagged with AMLTags.CLASS_INTERFACE
	}
	action {
		remove correspondence between interfaceClass and externalInterface tagged with AMLTags.CLASS_INTERFACE
	}
}

routine changePathForExternalInterfaceInInternalElement(caex::ExternalInterface externalInterface, caex::SystemUnitClass systemUnitClass, String path, caex::CAEXFile root) {
	match {
		val internalElements = retrieve many caex::InternalElement corresponding to systemUnitClass tagged with AMLTags.PROTOTYPE_CLONE
	}
	action {
		execute {
			val filteredInternalElements = CloneUtils.filterChangedClones(internalElements, systemUnitClass)
			for(InternalElement currInternalElement : filteredInternalElements) {
				val foundedInterface = SystemUnitClassForInterfaceChecker.getExternalInterface(currInternalElement, externalInterface.name, root)
				val pathAttribute = CAEXUtils.getAttributeInExternalInterface(foundedInterface, "refUri")
				pathAttribute.value = path
			}
		}
	}
}

// ***** Methode zum Einfügen eines externen Interfaces 

routine createInterfaceClassInTree(String path, caex::CAEXFile caexFile, caex::ExternalInterface externalInterface) {
	action {
		execute {
			val splitIndex = path.lastIndexOf("/")
			val pathToContainer = path.substring(0, splitIndex)
			val nameOfClass = path.substring(splitIndex + 1)
			val container = CAEXStringResolver.resolveInterfacePath(pathToContainer, caexFile)
			createInterfaceClass(nameOfClass, container, externalInterface)
		}
	}
}

routine createInterfaceClass(String name, caex::InterfaceClass container, caex::ExternalInterface externalInterface) {
	match {
		val oldInterfaceClass = retrieve caex::InterfaceClass corresponding to externalInterface tagged with AMLTags.CLASS_INTERFACE
	}
	action {
		val newClass = create caex::InterfaceClass and initialize {
			newClass.name = name
		}
		update container {
			container.interfaceClass.add(newClass)
		}
		remove correspondence between oldInterfaceClass and externalInterface tagged with AMLTags.CLASS_INTERFACE
		add correspondence between newClass and externalInterface tagged with AMLTags.CLASS_INTERFACE
	}
}