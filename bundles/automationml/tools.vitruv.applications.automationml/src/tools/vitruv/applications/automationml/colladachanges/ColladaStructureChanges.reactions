import tools.vitruv.applications.automationml.utils.aml.CAEXUtils
import caex.caex30.caex.ExternalInterface
import tools.vitruv.applications.automationml.utils.aml.AMLTags
import org.khronos.collada.SceneType
import org.eclipse.xtext.EcoreUtil2

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://www.dke.de/CAEX/300" as caex
import "http://edu.kit.ipd.sdq.aml" as aml
import "http://www.collada.org/2005/11/COLLADASchema" as collada

reactions: colladaStructureChanges
in reaction to changes in Collada
execute actions in Collada

// ***** Root anlegen/löschen

reaction CreateColladaRoot {
	after element collada::COLLADAType created
	call {
		logger.debug("CreateColladaRoot")
		
		createColladaContainer(affectedEObject)
		createColladaStructure(affectedEObject)
	}
}

reaction RemoveColladaRoot {
	after element collada::COLLADAType deleted
	call {
		logger.debug("RemoveColladaRoot")
		
		val sceneType = EcoreUtil2.getAllContentsOfType(affectedEObject, SceneType).get(0) 
		
		changePathForColladaInterfacesToEmpty(sceneType)
		removeColladaContainer(affectedEObject)
	}
}

// ***** Routinen, um Container für Collada anzulegen oder zu entfernen

routine createColladaContainer(collada::COLLADAType colladaType) {
	action {
		val container = create aml::ColladaContainer and initialize {
			container.path = ""
		} 
		add correspondence between colladaType and container tagged with AMLTags.AML_COLLADA
	}
}

routine removeColladaContainer(collada::COLLADAType colladaType) {
	match {
		val container = retrieve aml::ColladaContainer corresponding to colladaType tagged with AMLTags.AML_COLLADA
	}
	action {
		delete container
	}
}

// Routine, um Interfaces an gelöschte Dateien anzupassen

routine changePathForColladaInterfacesToEmpty(collada::SceneType scene) {
	match {
		val externalInterfaces = retrieve many caex::ExternalInterface corresponding to scene tagged with AMLTags.INTERFACE_SCENE
	}
	action {
		execute {
			for(ExternalInterface currInterface : externalInterfaces) {
				val pathAttribute = CAEXUtils.getAttributeInExternalInterface(currInterface, "refUri")
				pathAttribute.value = ""
			}
		}
	}
}

// ***** Routine, um Grundstruktur der Datei anzulegen

routine createColladaStructure(collada::COLLADAType colladaType) {
	action {
		val instance = create collada::InstanceWithExtra
		val sceneType = create collada::SceneType and initialize {
			sceneType.instanceVisualScene = instance
		}
		update colladaType {
			colladaType.scene = sceneType
		}
	}
}