import org.automationml.caex.caex.CAEXFile
import org.eclipse.xtext.EcoreUtil2

import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://org.automationml.caex" as caex

reactions: caex2plcopen
in reaction to changes in CAEX
execute actions in PLCOpen

// wie erste Verknüpfung zwischen Dokumenten???

// ***** ExternalInterface hinzufügen, Interface Typ setzen/ändern/löschen

reaction AddExternalInterface {
	after element caex::ExternalInterface inserted in caex::SystemUnitClass[externalInterface]
	call {
		if(newValue.refBaseClassPath.equals("AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface")){
			val caexFile = EcoreUtil2.getContainerOfType(newValue, CAEXFile)
			addCorrespondenceToPLCopen(newValue, caexFile)
		}
	} 
}

reaction AddExternalInterfaceType {
	after attribute insert in caex::ExternalInterface[refBaseClassPath]
	call {
		if(newValue.equals("AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface")){
			
		}
	}
}

reaction ChangeExternalInterfaceType {
	after attribute replaced at caex::ExternalInterface[refBaseClassPath]
	call {
		if(newValue.equals("AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface")){
			
		} else if(oldValue.equals("AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface")){
			
		}
	}
}

reaction RemoveExternalInterfaceType {
	after attribute remove from caex::ExternalInterface[refBaseClassPath]
	call {
		if(oldValue.equals("AutomationMLInterfaceClassLib/AutomationMLBaseInterface/ExternalDataConnector/PLCopenXMLInterface")){
			
		}
	}
}

routine addCorrespondenceToPLCopen (caex::ExternalInterface externalInterface, caex::CAEXFile caexFile) {
	match {
		val plcProject = retrieve plcopen::ProjectType corresponding to caexFile //with Pfadabgleich??	Und dann evtl neues Dokument anlegen?? Pfad überhaupt schon vorhanden?? selber anlegen??
	}
	action {
		add correspondence between externalInterface and plcProject
	}
}

routine removeCorrespondenceFromPLCopen (caex::ExternalInterface externalInterface){
	match {
		val plcProject = retrieve plcopen::ProjectType corresponding to externalInterface
	}
	action {
		remove correspondence between externalInterface and plcProject
	}
}

// ***** Pfadangabe in CAEX zu PLCopen Datei geändert -> Korrespondenz auflösen (und neue setzen)

reaction ChangeExternalInterfacePath {
	after attribute replaced at caex::ExternalReference[path]
	call {
		val reference = affectedEObject
		val currRoot = reference
		while(currRoot !== null){
			//currRoot = reference
		}
		changeIdCorrespondence(reference)
	}
}

routine changeIdCorrespondence (caex::ExternalReference reference) { //*caex::CAEXFile file
	match {
		val pouTypeOld = retrieve plcopen::PouType1 corresponding to reference
	}
	action {
		remove correspondence between reference and pouTypeOld
		//add correspondence between reference and pouTypeNew
	}
}


// ***** Anlegen einer SystemUnitClass -> Anlegen einer PLCopen Datei mit Grundstruktur
// sinnlos??

reaction SystemUnitClassAdded {
	after element caex::SystemUnitClass created
	call {
		//val newClass =
		//val caexRoot =  
		//addPLCopenFileWithStructure(newClass, caexRoot)*/
	}
}

routine addPLCopenFileWithStructure(caex::SystemUnitClass newClass, caex::DocumentRoot caexRoot) {
	action {
		val newPouType = create plcopen::PouType1 and initialize {
			newPouType.name = newClass.name
		}
		val newPousType = create plcopen::PousType and initialize {
			newPousType.pou.add(newPouType)
		}
		val newTypesType = create plcopen::TypesType and initialize {
			newTypesType.pous = newPousType
		}
		val newProjectType = create plcopen::ProjectType and initialize {
			newProjectType.types = newTypesType
		}
		val newDocumentRoot = create plcopen::DocumentRoot and initialize {
			newDocumentRoot.project = newProjectType
			persistProjectRelative(caexRoot, newDocumentRoot, newClass.name + "plcopen.xml");
		}
		add correspondence between newPouType and newClass
	}
}