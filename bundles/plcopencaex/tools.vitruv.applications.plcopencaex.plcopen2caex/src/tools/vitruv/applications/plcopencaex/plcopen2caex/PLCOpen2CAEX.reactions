import "http://www.plcopen.org/xml/tc6_0201" as plcopen
import "http://org.automationml.caex" as caex

reactions: plcopen2caex
in reaction to changes in PLCOpen
execute actions in CAEX

reaction AnyReactionTracking {
	after any change
	call {
		System.out.println("reacting to a change ...")
	}
}

reaction CreatedRoot {
	after element plcopen::DocumentRoot created and inserted as root
	call {
		val plcopenRoot = newValue;
		createCaexRoot(plcopenRoot);
	}
}

routine createCaexRoot(plcopen::DocumentRoot plcopenRoot) {
	match {
		check plcopenRoot.project !== null
	}
	action {
		val caexFile = create caex::CAEXFile
		add correspondence between plcopenRoot.project and caexFile
		val caexRoot = create caex::DocumentRoot and initialize {
			caexRoot.CAEXFile = caexFile;
			persistProjectRelative(plcopenRoot, caexRoot, "caexModel.caex");
		}
		add correspondence between caexRoot and plcopenRoot
	}
}

reaction CreatedFileHeaderType {
	after element plcopen::FileHeaderType created and inserted in plcopen::ProjectType[fileHeader]
	call {
		val fileHeaderType = newValue;
		createVersion(fileHeaderType);
	}
}

routine createVersion(plcopen::FileHeaderType fileHeaderType) {
	action {
		val version = create caex::Version 
		add correspondence between fileHeaderType and version
	}
}

reaction RenameProductVersion {
	after attribute replaced at plcopen::FileHeaderType[productVersion]
	call {
		renameVersionForProductVersion(affectedEObject);
	}
}

routine renameVersionForProductVersion(plcopen::FileHeaderType fileHeaderType) {
	match {
		val version = retrieve caex::Version corresponding to fileHeaderType
	}	
	action {
		update version {
			version.value = fileHeaderType.productVersion
		}
	}
}
// FIXME MK write PLCOpen2CAEX reaction
